import requests
from datetime import datetime
# from HK.bim_post_image import upload_drone_img
from bim_post_image import upload_drone_img
import threading

"""
url_for_production: 用于上传异常检测记录到生产环境数据库，例如无人机检测到的安全违规（如未戴安全帽）或工程机械和人数统计等事件。
url_for_production: Used to upload anomaly detection records to the production database, such as drone-detected safety violations (e.g., not wearing helmets) or statistics of machinery and personnel.

url_for_QDEQ: 用于上传详细检测结果到 QDEQ 系统 的数据库，除了基本数据外，还包含无人机的操作状态、项目ID和飞行时间等详细信息。
url_for_QDEQ: Used to upload detailed detection results to the QDEQ system database, including additional metadata such as UAV operation status, project ID, and flight time.
"""
url_for_production = "http://localhost:5000/api/productionEvent"  # TODO: Replace with production database
url_for_QDEQ = "http://localhost:5000/api/qdeqEvent"  # TODO: Replace with QDEQ system database

def post_async(url, payload):
    def _post():
        try:
            response = requests.post(url, json=payload)
            # 可选：打印或记录返回信息
            print("Async POST Response:", response.json())
        except Exception as e:
            print("Async POST Error:", e)
    # 新建并启动线程
    thread = threading.Thread(target=_post)
    thread.daemon = True  # 设置为守护线程，不会阻塞程序退出
    thread.start()

def analysis_results(violator_lsnumber, event_type, camera_id, violation_photo, event_description=""):
    """
    将风险识别的异常报警记录写入到数据库
    Writes anomaly detection and alarm records to the database.

    :param violator_lsnumber: string，必须，违规人员ID，未成功识别时输入-1，识别成功时输入人员ID，由接口1获取
    :param violator_lsnumber: string, required. ID of the violator. Use -1 if not successfully identified; use personnel ID if identified, as obtained from interface 1.

    :param event_type: string，必须，违规事件类型，无人机未戴安全帽：50，无人机识别工程机械和类数量统计：51
    :param event_type: string, required. Type of violation event:
                       - Drone detected no helmet: 50
                       - Drone statistics for machinery and personnel: 51.

    :param time: DateTime，必须，时间
    :param time: DateTime, required. Time of the event.

    :param camera_id: string，必须，由配置文件输入，测试时输入anJiu1
    :param camera_id: string, required. Input from the configuration file, use 'anJiu1' during testing.

    :param violation_photo: string，必须，照片存储路径，由接口3文件服务器接口获得
    :param violation_photo: string, required. Path of the photo stored, obtained via interface 3 (file server).

    :param id: string，非必须，唯一ID值，不可重复，不输入时由系统自动生成
    :param id: string, optional. Unique ID value, non-repeating. Generated by the system if not provided.

    :param event_description: string，非必须，违规事件描述，默认不写，如预置点信息采集则定义为球机或者枪机的预置点位置：，preset point 1，preset point 2，preset point 3
    :param event_description: string, optional. Description of the violation event. Defaults to blank. For preset point information collection, specify positions as preset point 1, preset point 2, etc.

    :return:
    """

    # TODO 将图片上传到文件服务器，数据上传到数据库中
    # TODO Upload the image to the file server and write data to the database.
    upload_img_status, upload_img_path = upload_drone_img(violation_photo, camera_id)

    # 如果图片上传成功,将数据插入数据库
    # If the image upload is successful, insert the data into the database.
    if upload_img_status:
        Createtime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print("Record Time:", Createtime)
        payload = {
            "Violator_LSNumber": str(violator_lsnumber),
            "EventType": str(event_type),
            "time": Createtime,
            "CameraID": str(camera_id),
            "ViolationPhoto": str(upload_img_path),
            "T2": 6,
            "EventDescription": str(event_description)
        }
        result = requests.post("http://localhost:5000/api/productionEvent", json=payload)
        print("Production Event Response:", result.json())
    else:
        print("[INFO] 文件：%s 上传失败！" % upload_img_path)


def analysis_results_for_QDEQ(violator_lsnumber, event_type, camera_id, violation_photo, UAV_status, CurrentObject="",
                              CurrentLocation="", event_description=""):
    """
    将风险识别的异常报警记录写入到数据库
    Writes anomaly detection and alarm records to the database.

    :param violator_lsnumber: string，必须，违规人员ID，未成功识别时输入-1，识别成功时输入人员ID，由接口1获取
    :param violator_lsnumber: string, required. ID of the violator. Use -1 if not successfully identified; use personnel ID if identified, as obtained from interface 1.

    :param event_type: string，必须，违规事件类型，无人机未戴安全帽：50，无人机识别工程机械：51 无人机统计人员机械总数：52
    :param event_type: string, required. Type of violation event:
                       - Drone detected no helmet: 50
                       - Drone detected machinery: 51
                       - Drone total count of personnel and machinery: 52.

    :param time: DateTime，必须，时间
    :param time: DateTime, required. Time of the event.

    :param camera_id: string，必须，由配置文件输入，测试时输入anJiu1
    :param camera_id: string, required. Input from the configuration file, use 'anJiu1' during testing.

    :param violation_photo: string，必须，照片存储路径，由接口3文件服务器接口获得
    :param violation_photo: string, required. Path of the photo stored, obtained via interface 3 (file server).

    :param id: string，非必须，唯一ID值，不可重复，不输入时由系统自动生成
    :param id: string, optional. Unique ID value, non-repeating. Generated by the system if not provided.

    :param CurrentObject: string，非必须，唯一ID值，描述当前帧的各个类的数量
    :param CurrentObject: string, optional. Unique ID value describing the count of each class in the current frame.

    :param event_description: string，非必须，违规事件描述，默认不写，如预置点信息采集则定义为球机或者枪机的预置点位置：，preset point 1，preset point 2，preset point 3
    :param event_description: string, optional. Description of the violation event. Defaults to blank. For preset point information collection, specify positions as preset point 1, preset point 2, etc.

    :return:
    """

    # TODO 将图片上传到文件服务器，数据上传到数据库中
    # TODO Upload the image to the file server and write data to the database.
    upload_img_status, upload_img_path = upload_drone_img(violation_photo, camera_id)

    # 如果图片上传成功,将数据插入数据库
    # If the image upload is successful, insert the data into the database.
    if upload_img_status:
        Createtime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        # print("Record Time (ISO):", Createtime)
        plan_id = UAV_status["data"]["planId"]
        flight_time = UAV_status["data"]["time"]
        # print(UAV_status["data"]["uavRecordId"])
        record_id = UAV_status["data"]["uavRecordId"]
        project_id = UAV_status["data"].get("projectId", "")
        payload = {
            "Violator_LSNumber": str(violator_lsnumber),
            "EventType": str(event_type),
            "time": Createtime,
            "CameraID": str(camera_id),
            "ViolationPhoto": str(upload_img_path),
            "T2": 6,
            "EventDescription": str(event_description),
            "ProjectId": str(project_id),
            "RobotId": "0",
            "PlanId": str(plan_id),
            "RecordId": str(record_id),
            "FlightTime": str(flight_time),
            "CurrentObject": str(CurrentObject)
            # "Location": str(CurrentLocation)  # 如需可取消注释
        }
        post_async("http://localhost:5000/api/qdeqEvent", payload)  # 实现异步
        # result = requests.post("http://localhost:5000/api/qdeqEvent", json=payload)
        # print("QDEQ Event Response:", result.json())
    else:
        print("[INFO] 文件：%s 上传失败！" % upload_img_path)
